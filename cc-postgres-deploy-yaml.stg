/*
 * Mandatory:
 *
 * vars.postgres.image.name
 * vars.postgres.image.version
 * vars.postgres.limits.cpu
 * vars.postgres.limits.memory
 * vars.postgres.requests.cpu
 * vars.postgres.requests.memory
 * vars.postgres.primaryUser
 * vars.postgres.primaryPassword
 * vars.postgres.user
 * vars.postgres.password
 * vars.postgres.database
 * vars.postgres.rootPassword
 * vars.rsync.image.name
 * vars.rsync.image.version
 * vars.rsync.limits.cpu
 * vars.rsync.limits.memory
 * vars.rsync.requests.cpu
 * vars.rsync.requests.memory
 * 
 * Optional:
 * 
 * vars.postgres.affinityRequired
 * vars.postgres.tolerations[].key
 * vars.postgres.tolerations[].effect
 * vars.postgres.tolerations[].value
 */

import "affinities.stg"
import "tolerations.stg"

cc-postgres-deploy-yaml(parent, vars) ::= <<

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: permissive-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: admin
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: kubelet
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-replica
  namespace: anrisoftware-com
  labels:
    group: anrisoftware-com

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-r1
  namespace: anrisoftware-com
  labels:
    app: postgres
    tier: backend
    group: anrisoftware-com
type: Opaque
data:
  primary_user: <vars.postgres.primaryUser;format="base64">
  primary_password: <vars.postgres.primaryPassword;format="base64">
  user: <vars.postgres.user;format="base64">
  password: <vars.postgres.password;format="base64">
  database: <vars.postgres.database;format="base64">
  root_password: <vars.postgres.rootPassword;format="base64">

---

kind: Service
apiVersion: v1
metadata:
  name: postgres-set
  namespace: anrisoftware-com
  labels:
    name: postgres-set
    app: postgres
    tier: backend
    group: anrisoftware-com
spec:
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    name: postgres-set
  type: ClusterIP
  sessionAffinity: None

---

kind: Service
apiVersion: v1
metadata:
  name: postgres-primary
  namespace: anrisoftware-com
  labels:
    name: postgres-primary
    app: postgres
    tier: backend
    group: anrisoftware-com
spec:
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 0
  selector:
    name: postgres-primary
  type: ClusterIP
  sessionAffinity: None

---

kind: Service
apiVersion: v1
metadata:
  name: postgres-replica
  namespace: anrisoftware-com
  labels:
    name: postgres-replica
    app: postgres
    tier: backend
    group: anrisoftware-com
spec:
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 0
  selector:
    name: postgres-replica
  type: ClusterIP
  sessionAffinity: None

---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: postgres-set
  namespace: anrisoftware-com
  labels:
    name: postgres-set
    app: postgres
    tier: backend
    group: anrisoftware-com
spec:
  serviceName: postgres-set
  replicas: 2
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        app: postgres
        name: postgres-replica
    spec:
      serviceAccount: postgres-replica
      securityContext:
        fsGroup: 26
      containers:
      - image: <vars.postgres.image.name>:<vars.postgres.image.version>
        name: postgres-replica
        ports:
        - containerPort: 5432
          name: "postgres"
        env:
        - name: PGHOST
          value: "/tmp"
        - name: PG_MODE
          value: set
        - name: PG_PRIMARY_HOST
          value: postgres-primary
        - name: PG_PRIMARY_PORT
          value: '5432'
        - name: PG_PRIMARY_USER
          valueFrom:
            secretKeyRef:
              name: postgres-r1
              key: primary_user
        - name: PG_PRIMARY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-r1
              key: primary_password
        - name: PG_USER
          valueFrom:
            secretKeyRef:
              name: postgres-r1
              key: user
        - name: PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-r1
              key: password
        - name: PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-r1
              key: database
        - name: PG_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-r1
              key: root_password
        resources:
          limits:
            cpu: <vars.postgres.limits.cpu>
            memory: <vars.postgres.limits.memory>
          requests:
            cpu: <vars.postgres.requests.cpu>
            memory: <vars.postgres.requests.memory>
        volumeMounts:
        - name: pgdata
          mountPath: "/pgdata"
          subPath: "pgdata"
      volumes:
      - name: pgdata
        persistentVolumeClaim:
          claimName: anrisoftware-com-data
      <affinitiesGroup(parent, vars, vars.postgres.affinityRequired)>
      <tolerationMaster(parent, vars, vars.postgres.allowOnMaster)>
      <tolerations(parent, vars, vars.postgres.tolerations, vars.postgres.allowOnMaster)>

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: rsync-postgres
  namespace: anrisoftware-com
  labels:
    app: rsync-postgres
    tier: backup
    group: anrisoftware-com
spec:
  replicas: 0
  selector:
    matchLabels:
      app: rsync-postgres
      tier: backup
      group: anrisoftware-com
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: rsync-postgres
        tier: backup
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.rsync.image.name>:<vars.rsync.image.version>
        name: rsync-postgres
        env:
        - name: RSYNC_AUTHORIZED_KEY
          valueFrom:
            secretKeyRef:
              name: rsync-ssh
              key: auth-key
        - name: USER
          value: "root"
        ports:
        - containerPort: 2222
          name: ssh
        readinessProbe:
          exec:
            command:
            - /readiness.sh
            - /data/postgres-set-0/PG_VERSION
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            cpu: <vars.rsync.limits.cpu>
            memory: <vars.rsync.limits.memory>
          requests:
            cpu: <vars.rsync.requests.cpu>
            memory: <vars.rsync.requests.memory>
        volumeMounts:
        - mountPath: "/data"
          subPath: "pgdata"
          name: data
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: anrisoftware-com-data
      <affinitiesGroup(parent, vars, vars.postgres.affinityRequired)>
      <tolerationMaster(parent, vars, vars.postgres.allowOnMaster)>
      <tolerations(parent, vars, vars.postgres.tolerations, vars.postgres.allowOnMaster)>

---

>>
