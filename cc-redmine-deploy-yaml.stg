/*
 * Mandatory:
 *
 * vars.redmine.image.name
 * vars.redmine.image.version
 * vars.redmine.revision
 * vars.redmine.initialDelaySeconds
 * vars.redmine.nginx.hosts[]
 * vars.redmine.puma.minThreads
 * vars.redmine.puma.maxThreads
 * vars.redmine.puma.workers
 * vars.redmine.puma.timeout
 * vars.redmine.postgres.user
 * vars.redmine.postgres.password
 * vars.redmine.postgres.database
 * vars.redmine.postgres.schema
 * vars.postgres.password
 * vars.nginx.image.name
 * vars.nginx.image.version
 * vars.nginx.workerProcesses
 * vars.nginx.workerConnections
 * vars.nginx.clientMaxBodySize
 * vars.nginx.readTimeout
 * vars.pgbouncer.image.name
 * vars.pgbouncer.image.version
 * vars.rsync.image.name
 * vars.rsync.image.version
 * vars.rsync.ssh.revision
 * 
 * Optional:
 * 
 * vars.redmine.limits.cpu
 * vars.redmine.limits.memory
 * vars.redmine.requests.cpu
 * vars.redmine.requests.memory
 * vars.redmine.affinity.key
 * vars.redmine.affinity.name
 * vars.redmine.affinity.required
 * vars.redmine.allowOnMaster
 * vars.redmine.tolerations[].effect
 * vars.redmine.tolerations[].key
 * vars.redmine.tolerations[].value
 * vars.nginx.limits.cpu
 * vars.nginx.limits.memory
 * vars.nginx.requests.cpu
 * vars.nginx.requests.memory
 * vars.pgbouncer.limits.cpu
 * vars.pgbouncer.limits.memory
 * vars.pgbouncer.requests.cpu
 * vars.pgbouncer.requests.memory
 * vars.rsync.limits.cpu
 * vars.rsync.limits.memory
 * vars.rsync.requests.cpu
 * vars.rsync.requests.memory
 */

import "robobeerun-templates/_affinities.stg"
import "robobeerun-templates/_cert_config.stg"
import "robobeerun-templates/_ingress_config.stg"
import "robobeerun-templates/_nginx_config.stg"
import "robobeerun-templates/_nginx_probe.stg"
import "robobeerun-templates/_postgres_probe.stg"
import "robobeerun-templates/_tolerations.stg"

/*
 *
 */
cc-redmine-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: Secret
metadata:
  name: redmine-db-<vars.redmine.revision>
  namespace: anrisoftware-com
  labels:
    app: redmine
    tier: backend
    group: anrisoftware-com
type: Opaque
data:
  user: <vars.redmine.postgres.user;format="base64">
  password: <vars.redmine.postgres.password;format="base64">
  database: <vars.redmine.postgres.database;format="base64">
  admin_password: <vars.postgres.password;format="base64">

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redmine-redmine-<vars.redmine.revision>
  namespace: anrisoftware-com
  labels:
    app: redmine
    tier: frontend
    group: anrisoftware-com
data:
  additional_environment.rb: |
    config.log_level = :warn
  database.yml: |
    production:
      adapter: postgresql
      database: <vars.redmine.postgres.database>
      host: 127.0.0.1
      username: <vars.redmine.postgres.user>
      password: "<vars.redmine.postgres.password>"
      encoding: utf8
      schema_search_path: <vars.redmine.postgres.schema>

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redmine-pgbouncer-<vars.redmine.revision>
  namespace: anrisoftware-com
  labels:
    app: pgbouncer
    tier: backend
    group: anrisoftware-com
data:
  pgbouncer.ini: |
    [databases]
    <vars.redmine.postgres.database> = host=db port=5432 dbname=<vars.redmine.postgres.database>
    [pgbouncer]
    listen_port = 5432
    listen_addr = 0.0.0.0
    auth_type = md5
    auth_file = /pgconf/bouncerconfig/users.txt
    logfile = /tmp/pgbouncer.log
    pidfile = /tmp/pgbouncer.pid
    admin_users = <vars.redmine.postgres.user>
  users.txt: |
    "<vars.redmine.postgres.user>" "<vars.redmine.postgres.password>"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redmine-nginx-<vars.redmine.revision>
  namespace: anrisoftware-com
  labels:
    app: nginx
    tier: frontend
    group: anrisoftware-com
data:
  nginx.conf: |
    <nginxDefaults(parent, vars, vars.nginx)>
    http {
        <nginxHttpDefaults(parent, vars, vars.nginx)>
        upstream backend {
            server 127.0.0.1:3000 max_fails=3 fail_timeout=<vars.nginx.readTimeout>;
        }
        <nginxVirtualHosts(parent, vars, vars.redmine.nginx.hosts)>
        server {
            listen 8080;
            listen [::]:8080;
            server_name <first(vars.redmine.nginx.hosts)>;
            root /var/www/html/public;
            index index.php;
            <nginxLocationFavicon(parent, vars)>
            <nginxLocationRobots(parent, vars)>
            <nginxLocationHidden(parent, vars)>
            <nginxLocationGitFiles(parent, vars)>
            ## All static files will be served directly.
            location ~* ^(?:(?:help\/)|(?:images\/)|(?:javascripts\/)|(?:plugin_assets\/)|(?:stylesheets\/)|(?:themes\/)).+\.(?:css|js|jpe?g|gif|htc|ico|png|html)$ {
                <nginxLocationStaticFilesConfig(parent, vars)>
            }
            <nginxRootProxyPassBackendLocation(parent, vars, vars.nginx)>
        }
    }

---

apiVersion: v1
kind: Service
metadata:
  name: redmine
  namespace: anrisoftware-com
  labels:
    app: redmine
    tier: frontend
    group: anrisoftware-com
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: 8080
  selector:
    app: redmine

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: redmine
  namespace: anrisoftware-com
  labels:
    app: redmine
    tier: frontend
    group: anrisoftware-com
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redmine
      tier: frontend
      group: anrisoftware-com
  template:
    metadata:
      labels:
        app: redmine
        tier: frontend
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.redmine.image.name>:<vars.redmine.image.version>
        name: redmine
        env:
        - name: PUMA_MIN_THREADS
          value: "<vars.redmine.puma.minThreads>"
        - name: PUMA_MAX_THREADS
          value: "<vars.redmine.puma.maxThreads>"
        - name: PUMA_CLUSTER_WORKERS
          value: "<vars.redmine.puma.workers>"
        - name: PUMA_WORKER_TIMEOUT
          value: "<vars.redmine.puma.timeout>"
        - name: PUMA_WORKER_BOOT_TIMEOUT
          value: "<vars.redmine.puma.timeout>"
        - name: REDMINE_DB_POSTGRES
          value: "db"
        - name: REDMINE_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: user
        - name: REDMINE_DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: database
        - name: REDMINE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: password
        - name: REDMINE_PLUGINS_MIGRATE
          value: "true"
        ports:
        - containerPort: 3000
          name: "http"
        <resourcesGroup(parent, vars, vars.redmine)>
        volumeMounts:
        - mountPath: "/var/www/html"
          name: "data"
          subPath: "redmine_html"
        - mountPath: "/redmine-in"
          name: "redmine-config"
        - mountPath: "/data"
          name: "data"
          subPath: "gitea_data"
        livenessProbe:
          tcpSocket:
            port: 3000
          initialDelaySeconds: <vars.redmine.initialDelaySeconds>
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
      - image: <vars.nginx.image.name>:<vars.nginx.image.version>
        name: nginx
        ports:
        - containerPort: 8080
          name: "http"
        <nginxReadinessProbe(parent, vars, vars.redmine)>
        <resourcesGroup(parent, vars, vars.nginx)>
        volumeMounts:
        - mountPath: "/var/www/html"
          name: "data"
          subPath: "redmine_html"
        - mountPath: "/nginx-in"
          name: "nginx-config"
      - image: <vars.pgbouncer.image.name>:<vars.pgbouncer.image.version>
        name: pgbouncer
        ports:
        - containerPort: 5432
          name: "postgres"
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: user
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: database
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          timeoutSeconds: 3
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - PGPASSWORD=${POSTGRESQL_PASSWORD}
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
        <resourcesGroup(parent, vars, vars.pgbouncer)>
        volumeMounts:
        - mountPath: "/pgconf/bouncerconfig"
          name: "pgbouncer-config"
      restartPolicy: Always
      volumes:
      - name: "data"
        persistentVolumeClaim:
          claimName: "anrisoftware-com-data"
      - name: "redmine-config"
        configMap:
          name: "redmine-redmine-<vars.redmine.revision>"
      - name: "nginx-config"
        configMap:
          name: "redmine-nginx-<vars.redmine.revision>"
      - name: "pgbouncer-config"
        configMap:
          name: "redmine-pgbouncer-<vars.redmine.revision>"
<affinitiesGroup(parent, vars, vars.redmine.affinity)>
<tolerationMasterGroup(parent, vars, vars.redmine.allowOnMaster)>
<tolerationsGroup(parent, vars, vars.redmine.tolerations, vars.redmine.allowOnMaster)>

---

apiVersion: batch/v1
kind: Job
metadata:
  name: redmine-db-setup
  namespace: anrisoftware-com
  labels:
    app: redmine
    tier: frontend
    group: anrisoftware-com
spec:
  template:
    metadata:
      name: redmine-db-setup
    spec:
      containers:
      - image: <vars.postgres.image.name>:<vars.postgres.image.version>
        name: redmine-db-setup
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: user
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: database
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redmine-db-<vars.redmine.revision>
              key: admin_password
        - name: PGHOST
          value: "postgres"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: "postgres"
        command:
        - /bin/sh
        - -i
        - -c
        - >
          while ! PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql "postgresql://postgres@postgres" -c "SELECT 1;"; do sleep 3; done;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createuser $POSTGRESQL_USER ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createdb --owner=$POSTGRESQL_USER $POSTGRESQL_DATABASE ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql -c "ALTER USER \"${POSTGRESQL_USER}\" WITH ENCRYPTED PASSWORD '${POSTGRESQL_PASSWORD}';";
          PGPASSWORD=${POSTGRESQL_PASSWORD} psql "postgresql://${POSTGRESQL_USER}@postgres" -c "CREATE SCHEMA anrisprojects;"
      restartPolicy: Never
  backoffLimit: 4

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: rsync-redmine
  namespace: anrisoftware-com
  labels:
    app: rsync-redmine
    tier: backup
    group: anrisoftware-com
spec:
  replicas: 0
  selector:
    matchLabels:
      app: rsync-redmine
      tier: backup
      group: anrisoftware-com
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: rsync-redmine
        tier: backup
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.rsync.image.name>:<vars.rsync.image.version>
        name: rsync-redmine
        env:
        - name: RSYNC_AUTHORIZED_KEY
          valueFrom:
            secretKeyRef:
              name: rsync-ssh-<vars.rsync.ssh.revision>
              key: auth-key
        - name: USER
          value: "root"
        ports:
        - containerPort: 2222
          name: ssh
        readinessProbe:
          exec:
            command:
            - /readiness.sh
            - /data/Rakefile
          initialDelaySeconds: 5
          timeoutSeconds: 1
        <resourcesGroup(parent, vars, vars.rsync)>
        volumeMounts:
        - mountPath: "/data"
          name: data
          subPath: redmine_html
        - mountPath: "/bundle"
          name: data
          subPath: redmine_bundle
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: anrisoftware-com-data
<affinitiesGroup(parent, vars, vars.redmine.affinity)>
<tolerationMasterGroup(parent, vars, vars.redmine.allowOnMaster)>
<tolerationsGroup(parent, vars, vars.redmine.tolerations, vars.redmine.allowOnMaster)>

---

>>
