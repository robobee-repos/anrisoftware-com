/*
 * Mandatory:
 *
 * vars.gitea.image.name
 * vars.gitea.image.version
 * vars.gitea.limits.cpu
 * vars.gitea.limits.memory
 * vars.gitea.requests.cpu
 * vars.gitea.requests.memory
 * vars.gitea.nginx.hosts[]
 * vars.gitea.postgres.user
 * vars.gitea.postgres.password
 * vars.gitea.postgres.database
 * vars.nginx.image.name
 * vars.nginx.image.version
 * vars.nginx.limits.cpu
 * vars.nginx.limits.memory
 * vars.nginx.requests.cpu
 * vars.nginx.requests.memory
 * vars.nginx.workerProcesses
 * vars.nginx.workerConnections
 * vars.nginx.clientMaxBodySize
 * vars.nginx.readTimeout
 * 
 * Optional:
 * 
 * vars.gitea.affinityRequired
 * vars.gitea.tolerations[].key
 * vars.gitea.tolerations[].effect
 * vars.gitea.tolerations[].value
 */

import "nginx_config.stg"
import "affinities.stg"
import "tolerations.stg"
import "ingress_config.stg"

/*
 *
 */
cc-gitea-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: Secret
metadata:
  name: gitea-db-r1
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: backend
    group: anrisoftware-com
type: Opaque
data:
  user: <vars.gitea.postgres.user;format="base64">
  password: <vars.gitea.postgres.password;format="base64">
  database: <vars.gitea.postgres.database;format="base64">

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-nginx-r6
  namespace: anrisoftware-com
  labels:
    app: nginx
    tier: frontend
    group: anrisoftware-com
data:
  nginx.conf: |
    <nginxDefaults(parent, vars)>
    http {
        <nginxHttpDefaults(parent, vars)>
        upstream backend {
            server 127.0.0.1:3000 max_fails=3 fail_timeout=<vars.nginx.readTimeout>;
        }
        <nginxVirtualHosts(parent, vars, vars.gitea.nginx.hosts)>
        server {
            listen 8080 default_server;
            listen [::]:8080 default_server;
            server_name <first(vars.gitea.nginx.hosts)>;
            root /var/www/html;
            <nginxLocationFavicon(parent, vars)>
            <nginxLocationRobots(parent, vars)>
            <nginxLocationHidden(parent, vars)>
            <nginxLocationGitFiles(parent, vars)>
            <nginxRootProxyPassBackendLocation(parent, vars)>
        }
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-env-r2
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
data:
  piwik_javascript: |
    \<!-- Piwik -->
    \<script type="text/javascript">
      var _paq = _paq || [];
      /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
      _paq.push(['trackPageView']);
      _paq.push(['enableLinkTracking']);
      (function() {
        var u="//piwik.andrea.muellerpublic.de/";
        _paq.push(['setTrackerUrl', u+'piwik.php']);
        _paq.push(['setSiteId', '3']);
        var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
        g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
      })();
    \</script>
    \<!-- End Piwik Code -->

---

apiVersion: v1
kind: Service
metadata:
  name: gitea
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: 8080
  selector:
    app: gitea

---

apiVersion: v1
kind: Service
metadata:
  name: git-public
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: backend
    group: anrisoftware-com
spec:
  type: NodePort
  ports:
  - name: "ssh"
    port: 4444
    targetPort: 22
    nodePort: 30022
  selector:
    app: gitea

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: gitea
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitea
      tier: frontend
      group: anrisoftware-com
  template:
    metadata:
      labels:
        app: gitea
        tier: frontend
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.gitea.image.name>:<vars.gitea.image.version>
        name: gitea
        env:
        - name: PIWIK_JAVASCRIPT
          valueFrom:
            configMapKeyRef:
              name: gitea-env-r2
              key: piwik_javascript
        ports:
        - containerPort: 22
          name: "ssh"
        - containerPort: 3000
          name: "gitea"
        resources:
          limits:
            cpu: <vars.gitea.limits.cpu>
            memory: <vars.gitea.limits.memory>
          requests:
            cpu: <vars.gitea.requests.cpu>
            memory: <vars.gitea.requests.memory>
        volumeMounts:
        - mountPath: "/data"
          name: data
          subPath: gitea_data
        - mountPath: "/var/www/html"
          name: data
          subPath: gitea_html
        readinessProbe:
          tcpSocket:
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
      - image: <vars.nginx.image.name>:<vars.nginx.image.version>
        name: nginx
        ports:
        - containerPort: 8080
          name: "http"
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
        resources:
          limits:
            cpu: <vars.nginx.limits.cpu>
            memory: <vars.nginx.limits.memory>
          requests:
            cpu: <vars.nginx.requests.cpu>
            memory: <vars.nginx.requests.memory>
        volumeMounts:
        - mountPath: "/var/www/html"
          name: data
          subPath: gitea_html
        - mountPath: /nginx-in
          name: nginx-config
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: anrisoftware-com-data
      - name: nginx-config
        configMap:
          name: gitea-nginx-r6
      <affinitiesGroup(parent, vars, vars.gitea.affinityRequired)>
      <tolerationMaster(parent, vars, vars.gitea.allowOnMaster)>
      <tolerations(parent, vars, vars.gitea.tolerations, vars.gitea.allowOnMaster)>

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gitea
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
  annotations:
    <ingressDefaultAnnotations(parent, vars, vars.gitea.nginx)>
spec:
  <ingressDefaultSpec(parent, vars, vars.gitea.nginx, "gitea")>

---

apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-db-setup
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
spec:
  template:
    metadata:
      name: gitea-db-setup
    spec:
      containers:
      - image: <vars.postgres.image.name>:<vars.postgres.image.version>
        name: gitea-db-setup
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: gitea-db-r1
              key: user
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gitea-db-r1
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: gitea-db-r1
              key: database
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-r2
              key: admin_password
        - name: PGHOST
          value: "postgres"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: "postgres"
        command:
        - /bin/sh
        - -i
        - -c
        - >
          while ! PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql "postgresql://postgres@postgres" -c "SELECT 1;"; do sleep 3; done;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createuser $POSTGRESQL_USER ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createdb --owner=$POSTGRESQL_USER $POSTGRESQL_DATABASE ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql --command "ALTER USER \"${POSTGRESQL_USER}\" WITH ENCRYPTED PASSWORD '${POSTGRESQL_PASSWORD}';"
      restartPolicy: Never
  backoffLimit: 4

---

>>
