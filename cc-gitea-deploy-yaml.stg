/*
 * Mandatory:
 *
 * vars.gitea.image.name
 * vars.gitea.image.version
 * vars.gitea.revision
 * vars.gitea.hosts[]
 * vars.gitea.postgres.user
 * vars.gitea.postgres.password
 * vars.gitea.postgres.database
 * vars.gitea.nginx.initialDelaySeconds
 * vars.postgres.password
 * vars.nginx.image.name
 * vars.nginx.image.version
 * vars.nginx.workerProcesses
 * vars.nginx.workerConnections
 * vars.nginx.clientMaxBodySize
 * vars.nginx.readTimeout
 * vars.rsync.ssh.revision
 * 
 * Optional:
 * 
 * vars.gitea.limits.cpu
 * vars.gitea.limits.memory
 * vars.gitea.requests.cpu
 * vars.gitea.requests.memory
 * vars.gitea.affinity.key
 * vars.gitea.affinity.name
 * vars.gitea.affinity.required
 * vars.gitea.allowOnMaster
 * vars.gitea.tolerations[].effect
 * vars.gitea.tolerations[].key
 * vars.gitea.tolerations[].value
 * vars.nginx.limits.cpu
 * vars.nginx.limits.memory
 * vars.nginx.requests.cpu
 * vars.nginx.requests.memory
 * vars.rsync.limits.cpu
 * vars.rsync.limits.memory
 * vars.rsync.requests.cpu
 * vars.rsync.requests.memory
 */

import "robobeerun-templates/_affinities.stg"
import "robobeerun-templates/_cert_config.stg"
import "robobeerun-templates/_ingress_config.stg"
import "robobeerun-templates/_nginx_config.stg"
import "robobeerun-templates/_nginx_probe.stg"
import "robobeerun-templates/_postgres_probe.stg"
import "robobeerun-templates/_tolerations.stg"
import "robobeerun-templates/_resources.stg"

/*
 *
 */
cc-gitea-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: Secret
metadata:
  name: gitea-db-<vars.gitea.revision>
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: backend
    group: anrisoftware-com
type: Opaque
data:
  user: <vars.gitea.postgres.user;format="base64">
  password: <vars.gitea.postgres.password;format="base64">
  database: <vars.gitea.postgres.database;format="base64">
  admin_password: <vars.postgres.password;format="base64">

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-nginx-<vars.gitea.revision>
  namespace: anrisoftware-com
  labels:
    app: nginx
    tier: frontend
    group: anrisoftware-com
data:
  nginx.conf: |
    <nginxDefaults(parent, vars, vars.nginx)>
    http {
        <nginxHttpDefaults(parent, vars, vars.nginx)>
        upstream backend {
            server 127.0.0.1:3000 max_fails=3 fail_timeout=<vars.nginx.readTimeout>;
        }
        <nginxVirtualHosts(parent, vars, vars.gitea.hosts)>
        server {
            listen 8080 default_server;
            listen [::]:8080 default_server;
            server_name <first(vars.gitea.hosts)>;
            root /var/www/html;
            <nginxLocationFavicon(parent, vars)>
            <nginxLocationRobots(parent, vars)>
            <nginxLocationHidden(parent, vars)>
            <nginxLocationGitFiles(parent, vars)>
            <nginxRootProxyPassBackendLocation(parent, vars, vars.nginx)>
        }
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-env-<vars.gitea.revision>
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
data:
  piwik_javascript: |
    \<!-- Global site tag (gtag.js) - Google Analytics -->
    \<script async src="https://www.googletagmanager.com/gtag/js?id=UA-119767261-1">\</script>
    \<script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-119767261-1');
    \</script>

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-pgbouncer-<vars.gitea.revision>
  namespace: anrisoftware-com
  labels:
    app: pgbouncer
    tier: backend
    group: anrisoftware-com
data:
  pgbouncer.ini: |
    [databases]
    <vars.gitea.postgres.database> = host=db port=5432 dbname=<vars.gitea.postgres.database>
    [pgbouncer]
    listen_port = 5432
    listen_addr = 0.0.0.0
    auth_type = md5
    auth_file = /pgconf/bouncerconfig/users.txt
    logfile = /tmp/pgbouncer.log
    pidfile = /tmp/pgbouncer.pid
    admin_users = <vars.gitea.postgres.user>
    ignore_startup_parameters = extra_float_digits
  users.txt: |
    "<vars.gitea.postgres.user>" "<vars.gitea.postgres.password>"

---

apiVersion: v1
kind: Service
metadata:
  name: gitea
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: 8080
  selector:
    app: gitea

---

apiVersion: v1
kind: Service
metadata:
  name: git-public
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: backend
    group: anrisoftware-com
spec:
  type: NodePort
  ports:
  - name: "ssh"
    port: 4444
    targetPort: 22
    nodePort: 30022
  selector:
    app: gitea

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: gitea
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitea
      tier: frontend
      group: anrisoftware-com
  template:
    metadata:
      labels:
        app: gitea
        tier: frontend
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.gitea.image.name>:<vars.gitea.image.version>
        name: gitea
        env:
        - name: PIWIK_JAVASCRIPT
          valueFrom:
            configMapKeyRef:
              name: gitea-env-<vars.gitea.revision>
              key: piwik_javascript
        ports:
        - containerPort: 22
          name: "ssh"
        - containerPort: 3000
          name: "gitea"
        <resourcesGroup(parent, vars, vars.gitea)>
        volumeMounts:
        - mountPath: "/data"
          name: data
          subPath: gitea_data
        - mountPath: "/var/www/html"
          name: data
          subPath: gitea_html
        readinessProbe:
          tcpSocket:
            port: 3000
          initialDelaySeconds: <vars.gitea.initialDelaySeconds>
          periodSeconds: 60
          timeoutSeconds: 10
      - image: <vars.nginx.image.name>:<vars.nginx.image.version>
        name: nginx
        ports:
        - containerPort: 8080
          name: "http"
        <nginxReadinessProbe(parent, vars, vars.gitea)>
        <resourcesGroup(parent, vars, vars.nginx)>
        volumeMounts:
        - mountPath: "/var/www/html"
          name: data
          subPath: gitea_html
        - mountPath: /nginx-in
          name: nginx-config
      - image: <vars.pgbouncer.image.name>:<vars.pgbouncer.image.version>
        name: pgbouncer
        ports:
        - containerPort: 5432
          name: "postgres"
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: gitea-db-<vars.redmine.revision>
              key: user
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gitea-db-<vars.redmine.revision>
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: gitea-db-<vars.redmine.revision>
              key: database
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          timeoutSeconds: 3
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - PGPASSWORD=${POSTGRESQL_PASSWORD}
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
        <resourcesGroup(parent, vars, vars.pgbouncer)>
        volumeMounts:
        - mountPath: "/pgconf/bouncerconfig"
          name: "pgbouncer-config"
      restartPolicy: Always
      volumes:
      - name: "data"
        persistentVolumeClaim:
          claimName: anrisoftware-com-data-1
      - name: "nginx-config"
        configMap:
          name: "gitea-nginx-<vars.gitea.revision>"
      - name: "pgbouncer-config"
        configMap:
          name: "gitea-pgbouncer-<vars.gitea.revision>"
      <affinitiesGroup(parent, vars, vars.gitea.affinity)>
      <tolerationMasterGroup(parent, vars, vars.gitea.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.gitea.tolerations, vars.gitea.allowOnMaster)>

---

apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-db-setup
  namespace: anrisoftware-com
  labels:
    app: gitea
    tier: frontend
    group: anrisoftware-com
spec:
  template:
    metadata:
      name: gitea-db-setup
    spec:
      containers:
      - image: <vars.postgres.image.name>:<vars.postgres.image.version>
        name: gitea-db-setup
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: gitea-db-<vars.gitea.revision>
              key: user
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gitea-db-<vars.gitea.revision>
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: gitea-db-<vars.gitea.revision>
              key: database
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gitea-db-<vars.gitea.revision>
              key: admin_password
        - name: PGHOST
          value: "postgres"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: "postgres"
        command:
        - /bin/sh
        - -i
        - -c
        - >
          while ! PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql "postgresql://postgres@postgres" -c "SELECT 1;"; do sleep 3; done;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createuser $POSTGRESQL_USER ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createdb --owner=$POSTGRESQL_USER $POSTGRESQL_DATABASE ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql --command "ALTER USER \"${POSTGRESQL_USER}\" WITH ENCRYPTED PASSWORD '${POSTGRESQL_PASSWORD}';"
      restartPolicy: Never
  backoffLimit: 4

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: rsync-gitea
  namespace: anrisoftware-com
  labels:
    app: rsync-gitea
    tier: backup
    group: anrisoftware-com
spec:
  replicas: 0
  selector:
    matchLabels:
      app: rsync-gitea
      tier: backup
      group: anrisoftware-com
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: rsync-gitea
        tier: backup
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.rsync.image.name>:<vars.rsync.image.version>
        name: rsync-gitea
        env:
        - name: RSYNC_AUTHORIZED_KEY
          valueFrom:
            secretKeyRef:
              name: rsync-ssh-<vars.rsync.ssh.revision>
              key: auth-key
        - name: USER
          value: "root"
        - name: RSYNC_STRICT_HOST_KEY_CHECKING_NO
          value: "true"
        ports:
        - containerPort: 2222
          name: ssh
        readinessProbe:
          exec:
            command:
            - /readiness.sh
            - /data/gitea/conf/app.ini
          initialDelaySeconds: 5
          timeoutSeconds: 1
        <resourcesGroup(parent, vars, vars.rsync)>
        volumeMounts:
        - mountPath: "/data"
          name: data
          subPath: gitea_data
        - mountPath: "/html"
          name: data
          subPath: gitea_html
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: anrisoftware-com-data-1
      <affinitiesGroup(parent, vars, vars.gitea.affinity)>
      <tolerationMasterGroup(parent, vars, vars.gitea.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.gitea.tolerations, vars.gitea.allowOnMaster)>

---

>>
