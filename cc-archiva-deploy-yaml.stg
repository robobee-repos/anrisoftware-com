/*
 * Mandatory:
 *
 * vars.archiva.storage
 * vars.archiva.image.name
 * vars.archiva.image.version
 * vars.archiva.revision
 * vars.archiva.initialDelaySeconds
 * vars.archiva.java.initialMemory
 * vars.archiva.java.maxMemory
 * vars.archiva.nginx.hosts[]
 * vars.archiva.nginx.clientMaxBodySize
 * vars.nginx.image.name
 * vars.nginx.image.version
 * vars.nginx.workerProcesses
 * vars.nginx.workerConnections
 * vars.nginx.clientMaxBodySize
 * vars.nginx.readTimeout
 * vars.rsync.image.name
 * vars.rsync.image.version
 * vars.rsync.ssh.revision
 * 
 * Optional:
 * 
 * vars.archiva.limits.cpu
 * vars.archiva.limits.memory
 * vars.archiva.requests.cpu
 * vars.archiva.requests.memory
 * vars.archiva.affinity.key
 * vars.archiva.affinity.name
 * vars.archiva.affinity.required
 * vars.archiva.allowOnMaster
 * vars.archiva.tolerations[].effect
 * vars.archiva.tolerations[].key
 * vars.archiva.tolerations[].value
 * vars.nginx.limits.cpu
 * vars.nginx.limits.memory
 * vars.nginx.requests.cpu
 * vars.nginx.requests.memory
 * vars.rsync.limits.cpu
 * vars.rsync.limits.memory
 * vars.rsync.requests.cpu
 * vars.rsync.requests.memory
 */

import "robobeerun-templates/_affinities.stg"
import "robobeerun-templates/_nginx_config.stg"
import "robobeerun-templates/_nginx_probe.stg"
import "robobeerun-templates/_tolerations.stg"
import "robobeerun-templates/_resources.stg"
import "robobeerun-templates/_cert_config.stg"
import "robobeerun-templates/_ingress_config.stg"

/*
 *
 */
cc-archiva-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: archiva-nginx-<vars.archiva.revision>
  namespace: anrisoftware-com
  labels:
    app: nginx
    tier: frontend
    group: anrisoftware-com
data:
  nginx.conf: |
    <nginxDefaults(parent, vars, vars.nginx)>
    http {
        <nginxHttpDefaults(parent, vars, vars.nginx)>
        upstream backend {
            server 127.0.0.1:8000 max_fails=3 fail_timeout=<vars.nginx.readTimeout>;
        }
        <nginxVirtualHosts(parent, vars, vars.archiva.nginx.hosts)>
        server {
            listen 8080;
            listen [::]:8080;
            server_name <first(vars.archiva.nginx.hosts)>;
            root /var/www/html/apps/archiva;
            index index.php;
            <nginxLocationFavicon(parent, vars)>
            <nginxLocationRobots(parent, vars)>
            <nginxLocationHidden(parent, vars)>
            <nginxLocationStaticFiles(parent, vars)>
            <nginxRootProxyPassBackendLocation(parent, vars, vars.nginx)>
        }
    }

---

apiVersion: v1
kind: Service
metadata:
  name: archiva
  namespace: anrisoftware-com
  labels:
    app: archiva
    tier: frontend
    group: anrisoftware-com
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: 8080
  selector:
    app: archiva

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: archiva
  namespace: anrisoftware-com
  labels:
    app: archiva
    tier: frontend
    group: anrisoftware-com
spec:
  replicas: 1
  selector:
    matchLabels:
      app: archiva
      tier: frontend
      group: anrisoftware-com
  template:
    metadata:
      labels:
        app: archiva
        tier: frontend
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.archiva.image.name>:<vars.archiva.image.version>
        name: archiva
        env:
        - name: ARCHIVA_JETTY_PORT
          value: "8000"
        - name: JAVA_INITIAL_MEMORY
          value: "<vars.archiva.java.initialMemory>"
        - name: JAVA_MAX_MEMORY
          value: "<vars.archiva.java.maxMemory>"
        ports:
        - containerPort: 8000
          name: "http"
        <resourcesGroup(parent, vars, vars.archiva)>
        volumeMounts:
        - mountPath: "/var/www/html"
          name: "data"
          subPath: "archiva_html"
        - mountPath: "/data"
          name: "data"
          subPath: "archiva_data"
        livenessProbe:
          tcpSocket:
            port: "http"
          initialDelaySeconds: <vars.archiva.initialDelaySeconds>
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: "http"
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
      - image: <vars.nginx.image.name>:<vars.nginx.image.version>
        name: nginx
        ports:
        - containerPort: 8080
          name: "http"
        <nginxReadinessProbe(parent, vars, vars.archiva)>
        <resourcesGroup(parent, vars, vars.nginx)>
        volumeMounts:
        - mountPath: "/var/www/html"
          name: "data"
          subPath: "archiva_html"
        - mountPath: "/nginx-in"
          name: "nginx-config"
      restartPolicy: Always
      volumes:
      - name: "data"
        persistentVolumeClaim:
          claimName: "anrisoftware-com-data"
      - name: "nginx-config"
        configMap:
          name: "archiva-nginx-<vars.archiva.revision>"
      <affinitiesGroup(parent, vars, vars.archiva.affinity)>
      <tolerationMasterGroup(parent, vars, vars.archiva.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.archiva.tolerations, vars.archiva.allowOnMaster)>

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: rsync-archiva
  namespace: anrisoftware-com
  labels:
    app: rsync-archiva
    tier: backup
    group: anrisoftware-com
spec:
  replicas: 0
  selector:
    matchLabels:
      app: rsync-archiva
      tier: backup
      group: anrisoftware-com
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: rsync-archiva
        tier: backup
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.rsync.image.name>:<vars.rsync.image.version>
        name: rsync-archiva
        env:
        - name: RSYNC_AUTHORIZED_KEY
          valueFrom:
            secretKeyRef:
              name: rsync-ssh-<vars.rsync.ssh.revision>
              key: auth-key
        - name: USER
          value: "root"
        ports:
        - containerPort: 2222
          name: ssh
        readinessProbe:
          exec:
            command:
            - /readiness.sh
            - /data/Rakefile
          initialDelaySeconds: 5
          timeoutSeconds: 1
        <resourcesGroup(parent, vars, vars.rsync)>
        volumeMounts:
        - mountPath: "/data"
          name: data
          subPath: archiva_html
        - mountPath: "/bundle"
          name: data
          subPath: archiva_bundle
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: anrisoftware-com-data
      <affinitiesGroup(parent, vars, vars.archiva.affinity)>
      <tolerationMasterGroup(parent, vars, vars.archiva.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.archiva.tolerations, vars.archiva.allowOnMaster)>

---

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: archiva-anrisoftware-com
  namespace: anrisoftware-com
  labels:
    app: archiva
    tier: frontend
    deployment: archiva
  annotations:
    <ingressDefaultAnnotations(parent, vars, vars.nginx)>
spec:
  <ingressDefaultSpec(parent, vars, vars.archiva.nginx, "archiva-anrisoftware-com")>

---

apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: archiva-anrisoftware-com
  namespace: anrisoftware-com
spec:
  <certDefaultSpecProd(parent, vars, vars.archiva.nginx, "archiva-anrisoftware-com")>

---

<ingressService(parent, vars, vars.archiva.nginx, "anrisoftware-com", "archiva", "archiva-anrisoftware-com")>

---

>>
